#!/usr/bin/env python3

from sys import argv
from math import sqrt
import signal

class TimeoutException(Exception):
    pass

def timeout_handler(signum, frame):
    raise TimeoutException("Timed out!")

def read_test_file(file_name):
    with open(file_name, "r", encoding="utf-8") as file:
        number = int(file.readline().strip())

    return [number]

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(sqrt(n))+1):
        if n % i == 0:
            return False
    return True

def find_numbers(n):
    signal.signal(signal.SIGALRM, timeout_handler)
    signal.alarm(3)
    try:
        for i in range(2, int(sqrt(n))+1):
            if n % i == 0 and is_prime(i) and is_prime(n // i):
                print("{}={}*{}".format(n, i, n // i))
                break
        else:
            print("{}=1*{}".format(n, n))
    except TimeoutException:
        print("{}=1*{}".format(n, n))

def factors(ls):
    for i in ls:
        find_numbers(i)

if len(argv) == 2:
    factors(read_test_file(argv[1]))
